<?php

namespace CA\CourrierBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * CourrierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourrierRepository extends EntityRepository
{ 
  public function getCorrespondantWithCourrier($id)
  {
    return $this->createQueryBuilder('c')
                ->join('c.correspondant', 'cor')
                ->addSelect('cor')
                ->where('c.id = :id')
                ->setParameter('id', $id)
                ->getQuery()
                ->getOneOrNullResult();
  }
    
  public function getCourriers($page, $nbPerPage, $type, $lu, $attribuated, $archived)
  {
    $query = $this->createQueryBuilder('c');
      
      $query->where('1 = 1');
      
      if ("true" === $type):
        $query->andwhere('c.type = true');
      elseif ("false" === $type):
        $query->andwhere('c.type = false');
      endif;
      
      if ("true" === $lu):
        $query->andwhere('c.lu = true');
      elseif ("false" === $lu):
        $query->andwhere('c.lu = false');
      endif;
      
      if ("true" === $attribuated):
        $query->andwhere('c.attribuated = true');
      elseif ("false" === $attribuated):
        $query->andwhere('c.attribuated = false');
      endif;
      
      if ("true" === $archived):
        $query->andwhere('c.archived = true');
      elseif ("false" === $archived):
        $query->andwhere('c.archived = false');
      endif;
      
      $query
          ->orderBy('c.createdAt', 'DESC')
          ->getQuery();
    
      $query
          ->setFirstResult(($page-1) * $nbPerPage)
          ->setMaxResults($nbPerPage)
    ;
    return new Paginator($query, true);
  }
    
      public function getCourriersT($page, $nbPerPage, $type, $archived, $status, $userId)
      {
        $query = $this->_em->createQueryBuilder('a', 'c')
                      ->select('a', 'c')
                      ->from('CACourrierBundle:AttributionUser', 'a')
                      ->leftJoin('CACourrierBundle:Attribution', 'b', 'WITH', 'b.id = a.attribution')
                      ->leftJoin('CACourrierBundle:Courrier', 'c', 'WITH', 'b.courrier = c.id')
                      ->where('a.user = :id');
          
          if ("true" === $type):
            $query->andwhere('c.type = true');
          elseif ("false" === $type):
            $query->andwhere('c.type = false');
          endif;

          if ("true" === $archived):
            $query->andwhere('a.archived = true');
          elseif ("false" === $archived):
            $query->andwhere('a.archived = false');
          endif;

          if (is_null($status)):
            $query->andwhere('1 = 1');
          elseif (2 === $status):
            $query->andwhere('a.statut <= 2');
          else:
            $query->andwhere('a.statut = :status');
          endif;

          $query
              ->orderBy('c.createdAt', 'DESC')
              ->setParameter('id', $userId)
              ->setParameter('status', $status)
              ->getQuery();

          $query
              ->setFirstResult(($page-1) * $nbPerPage)
              ->setMaxResults($nbPerPage)
        ;
        return new Paginator($query, true);
      }
}